@inject HttpClient HttpClient

<MudDialog>
    <DialogContent>
        <MudText>@Pizza.Special.Description</MudText>
        <div class="d-flex gap-3 align-center mt-4">
            <MudText>Size:</MudText>
            <MudSlider @bind-Value="@Pizza.Size" ValueLabel="true" Step="1"
                       Min="@Pizza.MinimumSize" Max="@Pizza.MaximumSize">
            </MudSlider>
            <MudText Style="white-space:nowrap;" Align="Align.Right">
                (@Pizza.Size") - $ @Pizza.GetFormattedBasePrice()
            </MudText>

        </div>
        
        @if(toppings != null)
        {
            <div class="d-flex gap-3 align-end">
                <MudText Class="mt-5 mb-1">Extra Toppings:</MudText>
                @if (MaxToppingsReached())
                {
                    <MudText Class="mt-5 mb-1">(Maximum reached)</MudText>
                }else{
                    <MudSelect T="int" MultiSelection="true" Dense="true" 
                       Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter"
                       MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                       @bind-Value="value" @bind-SelectedValues="selectedToppings">
                        @foreach (var topping in toppings)
                        {
                            <MudSelectItem T="int" Value="@topping.Id">
                                @topping.Name - ($ @topping.GetFormattedPrice())
                            </MudSelectItem>
                        }
                    </MudSelect>
                }
                
            </div>
            
            @if (selectedToppings.Any())
            {
                <div class="d-flex flex-wrap justify-center align-center mt-2">
                    @foreach (var toppingId in selectedToppings)
                    {
                        var topp = @toppings.Find(x => x.Id == toppingId);
                        <MudChip Color="Color.Primary" OnClose="@(()=>RemoveTopping(toppingId))">
                            @topp.Name - $ @topp.GetFormattedPrice()
                        </MudChip>
                    }
                </div>
            }
        }
        <div class="d-flex justify-space-between mt-6 mb-2">
            <MudButton Variant="Variant.Filled" OnClick="Cancel">Cancel</MudButton>
            <MudPaper Class="d-flex flex-wrap justify-center align-center" Elevation="0">
                <MudText Class="mr-1">Total Price:</MudText>
                <MudText Typo="Typo.h6"> $ @Pizza.GetFormattedTotalPrice()</MudText>
            </MudPaper>
            <MudButton Variant="Variant.Filled" OnClick="Submit" Color="Color.Success">Order</MudButton>
        </div>
    </DialogContent>
        
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Pizza Pizza { get; set; }
    List<Topping> toppings;

    protected override async Task OnInitializedAsync()
    {
        toppings = await HttpClient.GetFromJsonAsync<List<Topping>>("api/toppings");
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private int value { get; set; } = -1;
    private IEnumerable<int> selectedToppings { get; set; } = new HashSet<int>();


    private string GetMultiSelectionText(List<string> selectedValues)
    {
        string text = "-- Select --";
        if (selectedValues.Count > 0)
        {
            text = $"{selectedValues.Count} topping{(selectedValues.Count > 1 ? "s " : " ")} selected";
        }

        // Set selected Toppings
        var myToppings = toppings.Where(x => selectedToppings.Contains(x.Id)).ToList();

        Pizza.Toppings = new List<PizzaTopping>();
        foreach (var topp in myToppings)
        {
            Pizza.Toppings.Add(new PizzaTopping { Topping = topp });
        }

        return text;
    }
    private void RemoveTopping(int toppingId)
    {
        selectedToppings = selectedToppings.Where(x => x != toppingId);
    }
    private bool MaxToppingsReached()
    {
        return selectedToppings.Count() >= 6;
    }
}