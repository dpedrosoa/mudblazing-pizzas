@page "/"
@inject HttpClient HttpClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Blazing Pizzas</PageTitle>

@*Pizzas main container*@
<MudContainer MaxWidth="MaxWidth.Large" Class="my-4">
    @if (specials == null)
    {
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Class="ma-auto" />
    }
    else
    {
        <MudGrid>
            @foreach (var special in specials)
            {
                <MudItem sm="12" md="6" lg="4">
                    <MudCard Elevation="25" Style="height: 100%"
                     @onclick="@(()=>OpenConfigurePizzaDialog(special))">

                        <MudCardMedia Image="@special.ImageUrl" Height="200" />

                        <MudCardContent>
                            <MudText Typo="Typo.h5">@special.Name</MudText>
                            <MudText Typo="Typo.body2">@special.Description</MudText>
                            <MudText Typo="Typo.h5">$ @special.GetFormattedBasePrice()</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@*Order Sidebar*@
<MudDrawer @bind-Open="@drawerOpen" Elevation="1" Anchor="Anchor.Right" Color="Color.Dark"
           ClipMode="DrawerClipMode.Always"
           Class="d-flex flex-column" Width="300px">
    
    @if (order.Pizzas.Any())
    {
        <MudDrawerHeader Class="px-2">
            <MudText Typo="Typo.h6">Your Order</MudText>
        </MudDrawerHeader>
        <div class="flex-grow-1 overflow-y-auto">
            @foreach (var pizza in order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="pizza" OnRemoveConfiguredPizza="RemoveConfiguredPizza"/>
            }
        </div>
        <MudPaper Class="flex-shrink-0 d-flex flex-row justify-space-between align-center px-2"
              Style="@($"color:{Colors.Grey.Lighten4}; background:{Colors.Red.Darken3};")"
              Elevation="0" Square="true" Height="4rem">
            <MudText Class="align-center" Typo="Typo.h5">
                Total: <b>$ @order.GetFormattedTotalPrice()</b>
            </MudText>
            <MudChip Variant="Variant.Filled" Color="Color.Warning" Size="Size.Large" 
                 Style="@($"color:{Colors.Grey.Darken4};")" Icon="@Icons.Material.Filled.ShoppingCartCheckout"
                 @onclick="PlaceOrder">
                <MudText Typo="Typo.h5">
                    Order
                </MudText>
            </MudChip>
        </MudPaper>
    }
    else
    {
        <div class="ma-auto">
            <MudText Style="@($"color: {Colors.Grey.Lighten4}; text-align: center")" Typo="Typo.h5">
                Choose a pizza<br>to get started
            </MudText>
        </div>
    }
</MudDrawer>


@code {
    List<PizzaSpecial> specials;
    Pizza configuringPizza;
    Order order = new Order();
    bool drawerOpen;

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("api/specials");
        drawerOpen = true;
    }

    private async Task OpenConfigurePizzaDialog(PizzaSpecial special)
    {
        configuringPizza = new Pizza
            {
                Special = special
            };
        var parameters = new DialogParameters();
        parameters.Add("Pizza", configuringPizza);

        var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                Position = DialogPosition.TopCenter
            };

        var result = await DialogService.Show<ConfigurePizzaDialog>(special.Name, parameters, options).Result;
        if (result.Cancelled)
        {
            configuringPizza = null;
        }
        else
        {
            AddConfiguredPizza();
        }
    }
    private void AddConfiguredPizza()
    {
        order.Pizzas.Add(configuringPizza);
        configuringPizza = null;
    }

    private void RemoveConfiguredPizza(Pizza pizza)
    {
        order.Pizzas.Remove(pizza);
    }

    private async Task PlaceOrder()
    {
        drawerOpen = false;

        var result = await HttpClient.PostAsJsonAsync<Order>("api/orders", order);
        int orderId = await result.Content.ReadFromJsonAsync<int>();
        order = new Order(); 

        // navigate to order details
        NavigationManager.NavigateTo($"orders/{orderId}");
    }

}