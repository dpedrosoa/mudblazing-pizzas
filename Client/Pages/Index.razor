@page "/"
@inject HttpClient HttpClient
@inject IDialogService DialogService
@*@inject NavigationManager NavigationManager*@

<PageTitle>Blazing Pizzas</PageTitle>

@*Pizzas main container*@
<MudContainer MaxWidth="MaxWidth.Large" Class="my-4">
    @if (specials == null)
    {
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Class="ma-auto" />
    }
    else
    {
        <MudGrid>
            @foreach (var special in specials)
            {
                <MudItem sm="12" md="6" lg="4">
                    <MudCard Elevation="25" Style="height: 100%"
                     @onclick="@(()=>OpenConfigurePizzaDialog(special))">

                        <MudCardMedia Image="@special.ImageUrl" Height="200" />

                        <MudCardContent>
                            <MudText Typo="Typo.h5">@special.Name</MudText>
                            <MudText Typo="Typo.body2">@special.Description</MudText>
                            <MudText Typo="Typo.h5">$ @special.GetFormattedBasePrice()</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@*Order Sidebar*@
<OrderSidebar Order="order" DrawerOpen="true"/>

@code {
    List<PizzaSpecial> specials;
    Pizza configuringPizza;
    Order order = new Order();

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("api/specials");
    }

    private async Task OpenConfigurePizzaDialog(PizzaSpecial special)
    {
        configuringPizza = new Pizza
            {
                Special = special
            };
        var parameters = new DialogParameters();
        parameters.Add("Pizza", configuringPizza);

        var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                Position = DialogPosition.TopCenter
            };

        var result = await DialogService.Show<ConfigurePizzaDialog>(special.Name, parameters, options).Result;
        if (result.Cancelled)
        {
            configuringPizza = null;
        }
        else
        {
            AddConfiguredPizza();
        }
    }
    private void AddConfiguredPizza()
    {
        order.Pizzas.Add(configuringPizza);
        configuringPizza = null;
    }

}